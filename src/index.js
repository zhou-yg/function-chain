// Generated by CoffeeScript 1.8.0
(function() {
  var Z, arrayPush, branch, buildChain, buildChainCurry, compose, connect, getBranch, isAboutFn, isBranch, _ref;

  isAboutFn = require('./utils').isAboutFn;

  _ref = require('./branch'), branch = _ref.branch, isBranch = _ref.isBranch, getBranch = _ref.getBranch;

  arrayPush = require('./array').arrayPush;

  connect = require('./connect').connect;

  compose = function(fnArr, end) {
    return fnArr.reduceRight(function(preResult, fn) {
      if (isBranch(fn)) {
        return function(pre) {
          return fn.map(function(branchFnStack) {
            return compose(branchFnStack, preResult);
          }).forEach(function(branchFn) {
            return branchFn(pre);
          });
        };
      } else {
        return fn(preResult);
      }
    }, end);
  };

  buildChainCurry = function(startArg, endArg, fnStack) {
    if (isAboutFn(startArg)) {
      return buildChain(startArg, fnStack);
    } else {
      return (compose(fnStack, endArg))(startArg);
    }
  };

  buildChain = function(startArg, fnStack) {

    /* 引用传递，前后影响，单链条
    [].concat startArg
      .forEach (fn)->
        endArg.push fn
     */
    var chain;
    fnStack = fnStack.concat(startArg);
    chain = function(_startArg, _endArg) {
      return buildChainCurry(_startArg, _endArg, fnStack);
    };
    chain = connect(chain, buildChainCurry, fnStack);
    chain = branch(chain, buildChainCurry, fnStack);
    return chain;
  };

  Z = function(startArg) {
    return buildChain(startArg, []);
  };

  Z.partial = function(fnArr) {
    return function(fn) {
      return Z(fnArr, fn);
    };
  };

  module.exports = Z;

  this.Z = Z;

}).call(this);

//# sourceMappingURL=index.js.map
